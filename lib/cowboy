LOGFILE=/tmp/hooroo_docker_install.log
BIN_FILE=$(realpath ${BASH_SOURCE[0]})
INSTALL_DIR=$(realpath `dirname ${BIN_FILE}`/../)
COMPOSE_FILE="outlaw.yml"
START_COMMAND="start"
STOP_COMMAND="stop"
LOGS_COMMAND="logs"
STATUS_COMMAND="status"
UP_COMMAND="up"
RUN_COMMAND="run"
ENTER_COMMAND="enter"

VIRTUAL_TLD=${VIRTUAL_TLD:-dev}
DOCKER_MACHINE=${DOCKER_MACHINE:-dev}

copy_function() {
  test -n "$(declare -f $1)" || return 
  eval "${_/$1/$2}"
}

rename_function() {
  copy_function $@ || return
  unset -f $1
}

# Hijacked functions
copy_function install orig_install
copy_function handle_command orig_handle_command
copy_function do_log orig_do_log

function do_log() {
  echo -e "$@" > $LOGFILE
  orig_do_log "$@"
}

function run {
  log_debug "$@"
  eval "$@" 2>&1 | log_debug
}

function log_run {
  log_info "$@"
  eval "$@"
}

function try_times {
  n=0
  until [ $n -ge 5 ]
  do
     run "$@" && break
     sleep 3
     n=$[$n+1]
  done
}

function check_for_docker_machine {
  run "docker-machine ls | grep $DOCKER_MACHINE"
}

function ensure_docker_machine_running {
  local readonly status=$(docker-machine status $DOCKER_MACHINE 2>&1)
  test "$status" = "Running"
  if [[ $? -ne 0 ]]; then
    run "docker-machine start $DOCKER_MACHINE"
  fi
}

function load_docker_environment {
  ensure_docker_machine_running
  eval "$(DEBUG=false docker-machine env $DOCKER_MACHINE)"
}

function check_docker_works {
  log_info "Testing Docker installation"
  load_docker_environment
  try_times "docker ps"

  run "docker ps"
  if [[ $? -ne 0 ]]; then
    echo "Error during installation"
    exit 1
  fi
}

function create_docker_machine {
  log_info "Creating docker machine"
  check_for_docker_machine
  if [[ $? -ne 0 ]]; then
    run "docker-machine create --driver virtualbox $DOCKER_MACHINE"
    echo "Consider adding eval '\$(docker-machine env $DOCKER_MACHINE)' to your shell profile script"
    echo "Docker host is: $(docker-machine inspect --format="{{.Driver.IPAddress}}" $DOCKER_MACHINE)"
  fi
  load_docker_environment
}

function install_boot_sync {
  log_info "Installing Root Certificate for Hooroo CA"
  # Install Hooroo Root Certificate into boot2docker
  run "docker-machine scp $INSTALL_DIR/bootsync.sh $DOCKER_MACHINE:/tmp/bootsync.sh"
  run "docker-machine ssh $DOCKER_MACHINE \"sudo mv /tmp/bootsync.sh /var/lib/boot2docker/bootsync.sh\""
  run "docker-machine restart $DOCKER_MACHINE"
}

function pull_test_image {
  log_info "Pulling test image"
}

function success {
  run "curl -o /tmp/imgcat https://raw.githubusercontent.com/gnachman/iTerm2/master/tests/imgcat"
  run "chmod +x /tmp/imgcat"
  run "curl -o  /tmp/docker_install.png http://i.imgur.com/WQZRTjF.png"

  /tmp/imgcat /tmp/docker_install.png

  echo "Successfully installed"
}

function bifbam {
  local readonly ip=$(docker-machine inspect --format="{{.Driver.IPAddress}}" $DOCKER_MACHINE)
  #sudo route -n add 172.17.0.0/16 ${IP}

  local readonly tld_file="/etc/resolver/${VIRTUAL_TLD}"
  if [[ ! -f "$tld_file" ]]; then
    sudo sh -c "echo 'nameserver ${ip}' > $tld_file"
  fi

  run "cat $tld_file | grep $ip"
  if [[ $? -ne 0 ]]; then
    run "sudo sh -c \"echo 'nameserver $ip' > $tld_file\""
  fi
}

function install {
  log_info "Installing Outlaw..."
  orig_install
  create_docker_machine
  install_boot_sync
  check_docker_works
  pull_test_image

  log_info "Installing Outlaw Containers"
  bifbam

  success
}


function compose_run {
  load_docker_environment
  if [[ ! -f "$INSTALL_DIR/$COMPOSE_FILE" ]]; then
    log_error "Unable to find $COMPOSE_FILE $INSTALL_DIR"
    exit 1
  fi

  local readonly ip=$(docker-machine inspect --format="{{.Driver.IPAddress}}" $DOCKER_MACHINE)
  run "DOCKER_IP=$ip VIRTUAL_TLD=$VIRTUAL_TLD docker-compose -f $INSTALL_DIR/$COMPOSE_FILE $@"
}

function start {
  log_info "Starting Outlaw..."

  bifbam
  compose_run "up -d"
}

function stop {
  log_info "Stopping Outlaw..."
  compose_run "stop"
}

function status {
  compose_run "ps"
}

function outlaw_logs {
  compose_run "logs"
}

function instructions {
  echo -e
  echo -e "Usage: outlaw [COMMAND] [OPTIONS]"
  echo -e "Commands:"
  echo -e "  $SYNC_COMMAND\t\tStart file syncing. This is the default if no COMMAND is specified."
  echo -e "  $INSTALL_COMMAND\t\tInstall outlaw and all of its dependencies."
  echo -e "  $START_COMMAND\t\tStart the outlaw helper containers."
  echo -e "  $STOP_COMMAND\t\tStop the outlaw helper containers."
  echo -e "  $STATUS_COMMAND\tStatus of the outlaw helper containers."
  echo -e "  $LOGS_COMMAND\t\tLogs of the outlaw helper containers."
  echo -e "  $ENTER_COMMAND\t\t"
  echo -e "  $UP_COMMAND\t\t"
  echo -e "  $RUN_COMMAND\t\t"
}

function handle_command {
  local docker_compose_file="docker-compose.yml"

  while [[ $# > 0 ]]; do
    key="$1"

    case $key in
      "$START_COMMAND")
        start
        ;;
      "$STOP_COMMAND")
        stop
        ;;
      "$INSTALL_COMMAND")
        install
        ;;
      "$STATUS_COMMAND")
        status
        ;;
      "$LOGS_COMMAND")
        outlaw_logs
        ;;
      -f|--file)
        docker_compose_file=$2
        shift
        ;;
      "$RUN_COMMAND")
        shift # pop run
        local readonly dc_cmd="docker-compose -f $docker_compose_file run --service-ports $@"

        start
        log_run "$dc_cmd"
        exit 0
        ;;
      "$UP_COMMAND")
        local readonly dc_stop_cmd="docker-compose -f $docker_compose_file stop"
        local readonly dc_cmd="docker-compose -f $docker_compose_file $@"

        start
        orig_handle_command "sync-only"
        trap "kill %1; $dc_stop_cmd" SIGINT

        orig_handle_command "watch-only" & PIDWATCH=$!
        log_run "$dc_cmd"

        exit 0
        ;;
      "$ENTER_COMMAND")
        shift # pop enter
        id=$1
        shift
        cmd=$@
        cmd=${cmd:=sh}
        docker exec -ti $id $cmd
        exit 0
        ;;
      *)
        orig_handle_command "$@"
        ;;
    esac

    shift
  done
  exit 0
}

handle_command "$@"
