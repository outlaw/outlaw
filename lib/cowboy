LOGFILE=/tmp/hooroo_docker_install.log
BIN_FILE=$(realpath ${BASH_SOURCE[0]})
INSTALL_DIR=$(realpath `dirname ${BIN_FILE}`/../)
COMPOSE_FILE="outlaw.yml"
START_COMMAND="start"
STOP_COMMAND="stop"
LOGS_COMMAND="logs"
STATUS_COMMAND="status"
UP_COMMAND="up"
RUN_COMMAND="run"
VIRTUAL_TLD="dev"

function log_run {
  log_info "$1"
  echo "$1" > $LOGFILE
  eval "$1 > $LOGFILE 2>&1"
}

function check_for_docker_machine {
  log_run "docker-machine ls | grep dev"
}

function try_times {
  n=0
  until [ $n -ge 5 ]
  do
     eval $1 && break
     sleep 3
     n=$[$n+1]
  done
}

function start_and_load_docker_machine {
  log_run "docker-machine start dev"
  eval "$(DEBUG=false docker-machine env dev)"
}

function check_docker_works {
  log_info "Checking docker works"
  start_and_load_docker_machine
  try_times "docker ps"

  log_run "docker ps"
  if [[ $? -ne 0 ]]; then
    echo "Error during installation"
    exit 1
  fi
}

function create_docker_machine {
  log_info "Creating docker machine"
  check_for_docker_machine
  if [[ $? -ne 0 ]]; then
    log_run "docker-machine create --driver virtualbox dev"
    echo 'Consider adding eval "$(docker-machine env dev)" to your shell profile script'
    echo "Docker host is: $(docker-machine ip dev)"
  fi
  start_and_load_docker_machine
}

function install_boot_sync {
  log_info "Installing root certificate for Hooroo CA"
  # Install Hooroo Root Certificate into boot2docker
  log_run "docker-machine scp $INSTALL_DIR/bootsync.sh dev:/tmp/bootsync.sh"
  log_run "docker-machine ssh dev \"sudo mv /tmp/bootsync.sh /var/lib/boot2docker/bootsync.sh\""
  log_run "docker-machine restart dev"
}

function pull_test_image {
  log_info "Pulling test image"
  #log_run "docker pull docker-registry.in.jqdev.net/hooroo-base-alpine:latest"
}

function success {
  log_run "curl -o /tmp/imgcat https://raw.githubusercontent.com/gnachman/iTerm2/master/tests/imgcat"
  log_run "chmod +x /tmp/imgcat"
  log_run "curl -o  /tmp/docker_install.png http://i.imgur.com/WQZRTjF.png"

  /tmp/imgcat /tmp/docker_install.png

  echo "Successfully installed"

}

function bifbam {
  log_info "Installing outlaw containers"
  IP=$(DEBUG=false docker-machine ip dev)
  sudo route -n add 172.17.0.0/16 ${IP}
  sudo sh -c "echo 'nameserver ${IP}' > /etc/resolver/$VIRTUAL_TLD"
  log_info "Installing outlaw complete"
}

eval "$(echo "orig_install()"; declare -f install | tail -n +2)"
eval "$(echo "orig_handle_command()"; declare -f handle_command | tail -n +2)"
function install {
  log_info "Installing Outlaw..."
  orig_install
  create_docker_machine
  install_boot_sync
  check_docker_works
  pull_test_image
  bifbam

  success
}

function load_docker_environment {
  eval "$(DEBUG=false docker-machine env dev)"
}

function ensure_docker_machine_running {
  log_run "docker-machine start dev"
}

function compose_run {
  load_docker_environment
  ensure_docker_machine_running
  if [[ ! -f "$INSTALL_DIR/$COMPOSE_FILE" ]]; then
    log_error "Unable to find $COMPOSE_FILE $INSTALL_DIR"
    exit 1
  fi
  docker-compose -f $INSTALL_DIR/$COMPOSE_FILE "$1"
}

function start {
  log_info "Starting Outlaw..."
  compose_run "start"
}

function stop {
  log_info "Stopping Outlaw..."
  compose_run "stop"
}

function status {
  compose_run "ps"
}

function outlaw_logs {
  compose_run "logs"
}

function instructions {
  echo -e
  echo -e "Usage: outlaw [COMMAND] [OPTIONS]"
  echo -e "Commands:"
  echo -e "  $SYNC_COMMAND\t\tStart file syncing. This is the default if no COMMAND is specified."
  echo -e "  $INSTALL_COMMAND\t\tInstall outlaw and all of its dependencies."
  echo -e "  $START_COMMAND\t\tStart the outlaw helper containers."
  echo -e "  $STOP_COMMAND\t\tStop the outlaw helper containers."
  echo -e "  $STATUS_COMMAND\tStatus of the outlaw helper containers."
  echo -e "  $LOGS_COMMAND\t\tLogs of the outlaw helper containers."
}

function handle_command {
  local docker_compose_file="docker-compose.yml"

  while [[ $# > 0 ]]; do
    key="$1"

    case $key in
      "$START_COMMAND")
        start
        ;;
      "$STOP_COMMAND")
        stop
        ;;
      "$INSTALL_COMMAND")
        install
        ;;
      "$STATUS_COMMAND")
        status
        ;;
      "$LOGS_COMMAND")
        outlaw_logs
        ;;
      -f|--file)
        docker_compose_file=$2
        shift
        ;;
      "$RUN_COMMAND")
        shift # pop run
        docker-compose -f $docker_compose_file run --service-ports $@
        exit 0
        ;;
      "$UP_COMMAND")
        docker-compose -f $docker_compose_file $@
        exit 0
        ;;
      *)
        orig_handle_command "$@"
        ;;
    esac

    shift
  done
  exit 0
}

handle_command "$@"
